generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  // When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  board         Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id        String   @id @default(cuid())
  name      String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  list      List[]
  task      Task[]
  label     Label[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id        String   @id @default(cuid())
  name      String   @default("")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  position  Int?
  task      Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  name        String   @default("")
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  label       Label[]
  position    Int?
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Label {
  id        String   @id @default(cuid())
  name      String   @default("")
  color     String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
